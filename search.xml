<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>后端数据库学习——MYSQL</title>
      <link href="/2024/07/31/%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94MYSQL/"/>
      <url>/2024/07/31/%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94MYSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="后端数据库学习——MYSQL"><a href="#后端数据库学习——MYSQL" class="headerlink" title="后端数据库学习——MYSQL"></a><p align="center">后端数据库学习——MYSQL</p></h1><p align="right">作者：ATSWYL</p><blockquote><p>此笔记摘自黑马程序员B站教学视频<br><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=1">黑马程序员 MySQL数据库入门到精通</a></p></blockquote><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h4 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h4><ul><li>DDL：数据定义语言,定义数据库对象(数据库、表、字段)</li><li>DML：数据操作语言,对数据进行增删改</li><li>DQL：数据查询语言,用来查询表中数据</li><li>DCL：数据控制语言,用来控制数据库用户、控制数据库的控制权限</li></ul><h4 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL (数据定义语言)"></a>DDL (数据定义语言)</h4><h5 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h5><ol><li>查询所有的库</li></ol><p><code>SHOW DATABASES;</code><br>2. 查询当前的数据库<br><code>SELECT DATABASE();</code><br>3. 创建数据库<br><code>CREATE DATABASE [IF NOT EXISTS] 数据库名 [ DEFAULT CHARACTER SET 字符集] [ DEFAULT COLLATE 排序规则];</code><br>4. 删除数据库<br><code>DROP DATABASE [IF EXISTS] 数据库名;</code><br>5. 使用数据库<br><code>USE 数据库名;</code></p><blockquote><p>注意事项:UTF8字符集长度为3字节,一些符号占4字节,故字符集一般使用UTF8FMB4。</p></blockquote><h5 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h5><ol><li>查询当前数据库所有表</li></ol><p><code>SHOW TABLES;</code><br>2. 查询表结构<br><code>DESC 表名;</code><br>3. 查询指定表的建表语句<br><code> SHOW CREATE TABLE 表名;</code><br>4. 创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名 (</span><br><span class="line">    字段1 字段1类型 [COMMENT &#x27;注释&#x27;],</span><br><span class="line">    </span><br><span class="line">    字段2 字段2类型 [COMMENT &#x27;注释&#x27;],</span><br><span class="line"></span><br><span class="line">    字段3 字段3类型 [COMMENT &#x27;注释&#x27;],</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    z字段n 字段n类型 [COMMENT &#x27;注释&#x27;]</span><br><span class="line"></span><br><span class="line">)[COMMENT 注释];</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>删除表</li></ol><p><code>DROP TABLE 表名;</code><br>6. 修改表<br><code>ALTER TABLE 表名 [ADD|CHANGE|MODIFY|DROP] 字段名 字段类型 [COMMENT &#39;注释&#39;];</code></p><h5 id="字段操作"><a href="#字段操作" class="headerlink" title="字段操作"></a>字段操作</h5><ol><li>添加字段</li></ol><p><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT &#39;注释&#39;] [约束];</code></p><ol start="2"><li>修改字段类型</li></ol><p><code>ALTER TABLE 表名 MODIFY 字段名 类型(长度) [COMMENT &#39;注释&#39;] [约束];</code><br>3.  修改字段名和类型<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT &#39;注释&#39;] [约束];</code><br>4. 删除字段<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><h4 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML (数据操作语言)"></a>DML (数据操作语言)</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><ol><li>指定字段</li></ol><p><code>INSERT INTO 表名(字段1,字段2,字段3,...) VALUES(值1,值2,值3,...);</code><br>2. 全部字段<br><code>INSERT INTO 表名 VALUES(值1,值2,值3,...);</code></p><h5 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h5><ol><li>更新数据<br><code>UPDATE 表名 SET 字段名1=值1,字段名2=值2,... [WHERE 条件];</code></li><li>删除数据</li></ol><p><code>DELETE FROM 表名 [WHERE 条件];</code></p><h4 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL (数据查询语言)"></a>DQL (数据查询语言)</h4><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">        字段列表</span><br><span class="line">FROM</span><br><span class="line">        表名</span><br><span class="line">WHERE</span><br><span class="line">        条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">        分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">        分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">        排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">        分页参数</span><br></pre></td></tr></table></figure><h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><ol><li>查询多个字段<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1,字段2,字段3 FROM 表名;</span><br><span class="line">SELECT * FROM 表名;```</span><br></pre></td></tr></table></figure></li><li>设置别名 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1 [AS 别名1],字段2 [AS 别名2],字段3 [AS 别名3] FROM 表名;</span><br><span class="line">SELECT 字段1 [别名1],字段2 [别名2],字段3 [别名3] FROM 表名;</span><br></pre></td></tr></table></figure></li><li>去除重复记录</li></ol><p><code>SELECT DISTINCT 字段列表 FROM 表名;···</code></p><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p>语法:<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code><br> 条件:<br> <table></p><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &#124;&#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><h5 id="聚合查询-聚合函数"><a href="#聚合查询-聚合函数" class="headerlink" title="聚合查询(聚合函数)"></a>聚合查询(聚合函数)</h5><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tr><td>count(字段)</td><td>统计数量</td></tr><tr><td>sum(字段)</td><td>求和</td></tr><tr>         <td>avg(字段)</td><td>求平均值</td></tr><tr><td>max(字段)</td><td>求最大值</td></tr><tr><td>min(字段)</td><td>求最小值</td></tr></table>语法:<p><code>SELECT 聚合函数(字段列表) FROM 表名;</code></p><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><p>语法:<br><code>SELECT 字段列表 FROM 表名 [WHERE 条件列表]GROUP BY 分组字段列表;</code></p><p>where和having的区别:</p><ul><li>执行时机不同,where是分组前的条件,having是分组后的条件</li><li>判断条件不同,where不能对聚合函数进行判断,having可以</li></ul><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><p>语法:<br><code>SELECT 字段列表 FROM 表名 [WHERE 条件列表]ORDER BY 排序字段列表 [ASC|DESC];</code></p><p>排序方式:</p><ul><li>ASC: 升序(默认)</li><li>DESC: 降序</li></ul><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>语法:<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数;</code></p><p>起始索引可以省略,且值为(查询页码-1)*每页显示数量。</p><h4 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h4><h5 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h5><ol><li>查询用户<blockquote><ol><li>USE mysql;</li><li>SELECT * FROM user;</li></ol></blockquote></li><li>创建用户<br> <code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></li><li>修改用户密码<br> <code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;新密码&#39;;</code></li><li>删除用户<br><code> DROP USER &#39;用户名‘@&#39;主机名&#39;;</code></li></ol><h5 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h5><p>常用权限:</p><table><thead><th>权限</th><th>说明</th></thead><tr>        <td>ALL,ALL PRIVILEGES</td>        <td>所有权限</td></tr><tr>        <td>SELECT</td>        <td>查询数据</td></tr><tr>        <td>INSERT</td>        <td>插入数据</td></tr><tr>        <td>UPDATE</td>        <td>修改数据</td></tr><tr>        <td>DELETE</td>        <td>删除数据</td></tr><tr>        <td>ALTER</td>        <td>修改表</td></tr><tr>        <td>DROP</td>        <td>删除数据库/表/视图</td></tr><tr>        <td>CREATE</td>        <td>创建数据库/表</td></tr></table><ol><li>查询权限</li></ol><p> <code>SHOW GRANTS FOR &#39;用户名&#39;&#39;@主机名&#39;;</code><br>2. 授予权限<br>   <code>GRANT 权限 ON 数据库名.表名&#39;用户名&#39;@&#39;主机名&#39;;</code><br>3. 撤销权限<br><code>REVOKE 权限 ON 数据库名.表名&#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>注意事项:</p><ul><li>多个权限用逗号分隔</li><li>授权时,数据库名和表名可以用*进行通配,代表所有</li></ul><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h5 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h5><p>常用函数:</p><table><thead><th>函数</th><th>功能</th></thead><tbody><tr><td>CONCT(S1,S2,...)</td><td>字符串拼接,将S1,S2,...连接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>字符串全变为小写</td></tr><tr><td>LOWER(str)</td><td>字符串全变为小写</td></tr><tr><td>UPPER(str)</td><td>字符串全变为大写</td></tr><tr><td>LPAD(str,len,pad)</td><td>左填充,用字符串pad对str左边进行填充,使长度达到len</td></tr><tr><td>RPAD(str,len,pad)</td><td>右填充,用字符串pad对str右边进行填充,使长度达到len</td></tr><tr><td>TRIM(str)</td><td>去除字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回字符串从start开始的len个字符</td></tr><tr><td>REPLACE(str,old,new)</td><td>将字符串str中的old替换为new</td></tr></tbody></table><h5 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h5><p>常用函数:</p><table><thead><th>函数</th><th>功能</th></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x/y的余数</td></tr><tr><td>RAND()</td><td>返回0~1之间的随机数</td></tr><tr><td>ROUND(x,y)</td><td>x的四舍五入值,保留y位小数</td></tr></tbody></table><h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><p>常用函数:</p><table><thead><th>函数</th><th>功能</th></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAT(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date,interval expr type)</td><td>返回一个日期加上一个时间间隔后的时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1和date2的差值,单位为天</td></tr></tbody></table><h5 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h5><p>常用函数:</p><table><thead><th>函数</th><th>功能</th></thead><tbody><tr><td>IF(value,t,f)</td><td>如果value为真,返回t,否则返回f</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果value1不为NULL,返回value1,否则返回value2</td></tr><tr><td>CASE WHEN[VA1] THEN[RES1]...ELSE [DEFAULT]END</td><td>如果value为真,返回res,否则返回default默认值</td></tr><tr><td>CASE [expr] WHEN [val1] THEN [res]...ELSE END</td><td>expr值为val1返回res1,否则返回default默认值</td></tr></tbody></table><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><p>分类:</p><table><thead><th>约束</th><th>描述</th><th>关键字</th></thead><tbody><tr><td>非空约束</td><td>限制该字段数据不能为NULL</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有元素都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识,要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据,未指定该字段的值,采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束</td><td>保证字段值满足某一条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图数据之间建立连接</td><td>FOREIGN KEY</td></tr></tbody></table>约束是作用于表中字段上的,可以创建/修改表的时候,添加约束<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><h5 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h5><ul><li>一对多</li><li>多对多</li><li>一对一</li></ul><h5 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h5><p>案例:部门与员工<br>关系:一个部门对应多个员工,一个员工对应一个部分<br>实现:在多的一方建立外键,指向一的一方的主键</p><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><p>案例:学生与课程<br>关系:一个学生可以选多个课程,一个课程可以供多个学生选修<br>实现:建立第三张中间表,中间表包含两个外键,分别关联两方主键</p><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><p>案例:用户与用户详情<br>关系:一个用户对应一个用户详情,一个用户详情对应一个用户<br>实现:在任意一方加入外键,关联另一方的主键,并且外键为唯一的UNIQUE</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><h5 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h5><p><code> SELECT * FROM 表1,表2；</code></p><blockquote><p>笛卡尔积：两个集合所有组合情况(多表查询时,需要消除无效的笛卡尔积)<br>消除无效的笛卡尔积:<br><code>SELECT *FROM 表1,表2 WHERE 表1.字段=表2.字段；</code></p></blockquote><h5 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h5><p>内连接查询的是两张表交集的部分</p><p>隐式内连接:<br><code>SELECT 字段列表 FROM 表1,表2 WHERE 条件...;</code></p><p>显式内连接:<br><code>SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件...;</code></p><p>显式性能要高于隐式性能</p><h5 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h5><p>左外连接:<br>查询左表所有数据,以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件...;</code></p><p>右外连接:<br>查询右表所有数据,以及两张表交集部分数据<br><code> SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON ....;</code></p><h5 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h5><p>当前表与自身的连接查询,自连接必须使用表别名<br>语法:<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件...;</code></p><h5 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union,union all"></a>联合查询 union,union all</h5><p>把多次查询的结果合并,形成一个新的查询集<br>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B...</span><br></pre></td></tr></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UNION ALL 会有重复结果,UNION不会</li><li>联合查询比使用OR效率高,不会使索引失效</li></ul><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>SQL语句中的嵌套SELECT语句,称为嵌套查询,又称子查询<br><code>SELECT *FROM t1 WHERE column1=(SELECT colum1 FROM t2);</code></p><blockquote><p>子查询外部的语句可以是 INSERT&#x2F;UPDATE&#x2F;DELETE&#x2F;SELECT中的任意一个<br>根据子查询结果可以分为:</p></blockquote><ul><li>标量子查询(子查询结果为单个值)</li><li>列子查询(子查询为一列)</li><li>行子查询(子查询结果为一行)</li><li>表查询(子查询结果为多行多列)</li></ul><h5 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h5><p>子查询返回的结果是单个值(数字、字符串、日期等)<br>常用操作符:- &#x3D; &lt; &gt; &lt;&#x3D; &gt;&#x3D; &lt;&gt; </p><h5 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h5><p>返回结果是一列<br>常用操作符:</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tr><td>IN</td><td>在指定的集合范围,多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表,有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同,使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></table><h5 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h5><p>返回的结果是一行<br>常用操作符：&#x3D;, &lt;, &gt;, IN, NOT IN</p><h5 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h5><p>返回的结果是多行多列<br>常用操作符：IN</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务是一组操作的集合,事务会把所有操作作为一个整体向系统提交或撤销操作请求,这些操作要么同时成功,要么同时失败</p><h5 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h5><ul><li>原子性(Atomicity):事务是不可分割的最小操作单元,要么全部成功,要么全部失败</li><li>一致性(Consistency):事务完成时,必须使所有数据都保持一致状态</li><li>隔离性(Isolation):数据库系统提供的隔离机制,保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability):事务一旦提交或回滚,它对数据库中数据的改变就是永久的</li></ul><h5 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h5><table><thead><th>问题</th><th>描述</th><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没有提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录,但读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时,没有对应的数据行,但是再插入数据时,这行数据又已经存在</td></tr></tbody></thead></table><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><img src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="MySQL体系结构" style="zoom:50%;" /><ul><li><p>连接层<br>最上层是客户端和链接服务,主要完成一些类似连接处理、授权认证、安全等功能,服务器也会为安全接入的每个客户端验证它所具有的操作权限</p></li><li><p>服务层<br>第二层架构主要完成大多数核心服务功能,如SQL接口,并完成缓存的查询,SQL的分析优化,部分内置函数的执行。所有跨存储引擎的功能也在这一层实现,如存储过程、触发器、视图等。</p></li><li><p>引擎层<br>存储引擎真正的负责了MYSQL中数据的存储和提取,服务器通过API和存储引擎进行通信。不同的存储引擎有不同的功能,根据需要进行选择</p></li><li><p>存储层</p><p>主要讲数据存储在文件系统上,并完成存储引擎的交互</p></li></ul><p>存储引擎是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式,存储引擎是基于表而不是基于库的,所以存储引擎可被称为表引擎。默认存储引擎是InnoDB<br> 相关操作<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--查询建表语句</span><br><span class="line">SHOW CREATE TABLE ACCOUNT;</span><br><span class="line">--建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">        字段名 字段类型 约束,</span><br><span class="line">         ...</span><br><span class="line">       ) ENGINE=存储引擎;</span><br><span class="line">--查看当前数据库支持的存储引擎</span><br><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure></p><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p> InnoDB是一种兼顾高可靠性和高性能的通用存储引擎,在MYSQL中为默认引擎</p><p> 特点:</p><ul><li>DML操作遵循ACID模型，支持事务</li><li>行级锁,提高并发访问性能</li><li>支持外键约束,保证数据的完整性和正确性</li></ul><p>文件:<br>xxx.ibd:InnoDB引擎的每张表会对应一个ibd文件,存储该表的表结构、数据和索引</p><p>InnoDB逻辑存储结构<br><img src="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="InnoDB逻辑存储结构" style="zoom:50%;" /></p><h4 id="存储引擎的特点"><a href="#存储引擎的特点" class="headerlink" title="存储引擎的特点"></a>存储引擎的特点</h4><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h4 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h4><p>选择存储引擎时,应该根据应用系统的特点选择合适的存储引擎。对于复杂应用系统,根据实际情况选择多种存储引擎进行组合。</p><ul><li><p>InnoDB：如果应用对事物的完整性有比较高的要求,在并发条件下要求数据的一致性,数据操作除了插入和查询之外,还包括很多更新、删除操作,则InnoDB是最佳选择。</p></li><li><p>MyISAM：如果应用以读操作和插入操作为主,只有很少的更新和删除操作,并且对事务的完整性、并发性要求不高,则MyISAM是最佳选择。</p></li><li><p>Memory:将所有数据保存在内存中,访问速度快，通常用于临时表及缓存。Memory的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</p><p>电商中的足迹和评论适合使用MyISAM引擎,缓存适合使用Memory引擎。</p></li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引是帮助MySQL <strong>高效获取数据</strong>的**数据结构(有序)**。在数据之外，数据库系统还维护满足特定查找算法的数据结构,这些数据结构以某种方式引用(指向)数据，这样就可以在这些数据结构上实现高级查询算法,这种数据结构就是索引</p><p>优缺点:<br>优点:</p><ul><li><p>提高数据检索效率,降低数据库的IO成本</p></li><li><p>通过对索引列对数据进行排序,降低数据排序的成本,降低CPUD的消耗</p><p>缺点:</p><ul><li>索引列也要占用空间</li><li>索引大大提高了查询效率,但降低了更新速度,增删改</li></ul></li></ul><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><table><thead><th>索引结构</th><th>描述</th></thead><tr><td>B+Tree</td><td>最常见的索引类型,大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构用哈希表实现,只有精确匹配索引列的查询才有效,不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是MyISAM引擎中的一个特殊索引类型,主要用于地理空间数据类型,使用很少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种建立倒排索引,快速匹配文档的方式,类似于Lucene,Solr,Es</td></tr></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习</title>
      <link href="/2024/07/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div style="text-align: center;">  <font face="仿宋" color="green" size="10">前端学习</font></div><div style="text-align: right;">  <font face="楷体" size="3">———ATSWYL</font></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客文章</title>
      <link href="/2024/07/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2024/07/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一篇博客——Markdown入门教程"><a href="#第一篇博客——Markdown入门教程" class="headerlink" title="第一篇博客——Markdown入门教程"></a><font face="仿宋" font color=orange>第一篇博客——Markdown入门教程</font></h1><h2 id="ATSWYL"><a href="#ATSWYL" class="headerlink" title="ATSWYL"></a><center><font face="楷体" size=5>ATSWYL</font></center></h2><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">    MathJax.Hub.Config({ tex2jax: {inlineMath: [['$', '$']]}, messageStyle: "none" });</script><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ol><li><strong>安装vscode</strong></li><li><strong>下载必要的插件</strong><ul><li>Markdown ALL in one</li><li>Markdown Preview Enhanced</li><li>Markdown Pdf</li><li>Paste Image</li></ul></li><li><strong>创建.md文件,markdown后缀为md,开始编辑</strong></li></ol><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><ol><li><strong>标题</strong><br> #一级标题<br> ##二级标题<br> …<br> 最多有六级标题</li><li><strong>引用</strong><blockquote><p>编辑教程文档</p></blockquote></li><li><strong>列表</strong><ol><li>无序列表</li></ol><ul><li>列表1</li></ul><ul><li>列表2</li></ul><ul><li>列表三</li></ul><ol start="2"><li>有序列表</li><li>嵌套</li><li>Todolist<ul><li><input checked="" disabled="" type="checkbox"> a</li><li><input disabled="" type="checkbox"> b</li><li><input disabled="" type="checkbox"> c</li></ul></li></ol></li><li><strong>表格</strong></li></ol><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">a</td><td align="center">b</td><td align="right">c</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th></tr></thead></table><blockquote><p>表格的语法:表格上一行需要为空,表头与标题之间 需要有分割行| — | —- |—| ,中间的短横线 至少有三个</p></blockquote><ol start="5"><li><p><strong>段落</strong></p><ul><li>换行 —— 两个以上空格后回车&#x3D;空一行  </li><li>分割线 —— 三个*</li></ul><hr><ul><li>字体</li></ul><table><thead><tr><th align="center">字体</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center"><em>斜体</em></td><td align="center">* *</td></tr><tr><td align="center">&#x3D;&#x3D;高亮&#x3D;&#x3D;</td><td align="center">&#x3D;&#x3D; &#x3D;&#x3D;</td></tr><tr><td align="center"><strong>粗体</strong></td><td align="center">** **</td></tr><tr><td align="center"><em><strong>斜粗体</strong></em></td><td align="center">*** ***</td></tr><tr><td align="center"><del>删除</del></td><td align="center">~~ ~~</td></tr><tr><td align="center"><u>下划线</u></td><td align="center"><code>&lt;u&gt; &lt;u&gt;</code></td></tr></tbody></table><ul><li>脚注<br>  这是一个例子<a href="%E8%BF%99%E6%98%AF%E8%84%9A%E6%B3%A8%E7%9A%84%E5%86%85%E5%AE%B9">^1</a>。<br>必须有解释</li></ul></li><li><p><strong>代码</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>printf(&quot;hello,world&quot;)</code></p></li><li><p><strong>超链接</strong></p><ul><li>更多教程可参考<a href="https://markdown.com.cn/">该链接</a></li><li>查看更多功能请<a href="https://www.runoob.com/markdown/md-tutorial.html">点击链接</a></li><li>通过变量设置链接,变量值需要赋值在文章末尾<br> 变量值用Help作为网址变量,<a href="https://www.google.com/">Google</a></li></ul></li><li><p><strong>图片</strong></p><ul><li>使用图床保存图片并实现插入<br> [路过图床]：<a href="https://imgse.com/#google_vignette">https://imgse.com/#google_vignette</a><blockquote><p>插入图片语法: ![alt 文本属性] (图片地址)</p></blockquote></li></ul><p>也可以利用HTML直接插入图片,并设置大小<br><img src="https://s21.ax1x.com/2024/07/27/pkqMqbV.jpg" alt="偶像" width="300" height="300"></p><p> Markdown无法直接指定图片高度与宽度,可以用HTML中&lt; img &gt;标签来修改图片大小</p></li></ol><h3 id="三、其他操作"><a href="#三、其他操作" class="headerlink" title="三、其他操作"></a>三、其他操作</h3><ul><li><p><strong>插入Latex公式</strong></p><ul><li>行内显示<br>   $f(x)&#x3D;ax^2+bx+c$  </li><li>块内显示<br> $$<br>\begin{Bmatrix}<br>  a &amp; b \<br>  c &amp; d<br>\end{Bmatrix}<br>$$</li></ul></li><li><p><strong>Markdown兼容HTML</strong><br>利用HTML可以使样式更加出彩</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
